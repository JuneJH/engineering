{"remainingRequest":"/Users/june/Desktop/work/engineering/node_modules/thread-loader/dist/cjs.js!/Users/june/Desktop/work/engineering/node_modules/babel-loader/lib/index.js!/Users/june/Desktop/work/engineering/node_modules/webpack-dev-server/client/modules/logger/index.js","dependencies":[{"path":"/Users/june/Desktop/work/engineering/node_modules/webpack-dev-server/client/modules/logger/index.js","mtime":499162500000},{"path":"/Users/june/Desktop/work/engineering/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/june/Desktop/work/engineering/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/june/Desktop/work/engineering/node_modules/babel-loader/lib/index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}